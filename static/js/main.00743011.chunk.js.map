{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","style","humidity","description","error","API_KEY","process","App","state","undefined","event","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAWeA,EATA,WACb,OACE,6BACE,wBAAIC,UAAU,0BAAd,kBACA,wBAAIA,UAAU,uBAAd,kDCMSC,EAVF,SAAAC,GACX,OACE,0BAAMC,SAAUD,EAAME,YACpB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDCyBSC,EA9BC,SAAAN,GACd,OACE,yBAAKF,UAAU,iBAEXE,EAAMO,MAAQP,EAAMQ,SAAW,uBAAGV,UAAU,gBAAb,YAC7B,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMO,KAA1C,KAAoDP,EAAMQ,UAI5DR,EAAMS,aAAe,uBAAGX,UAAU,gBAAb,eACnB,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMS,aAAoB,0BAAMC,MAAO,CAAC,MAAQ,SAAtB,UAIhEV,EAAMW,UAAY,uBAAGb,UAAU,gBAAb,YAChB,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMW,UAAiB,0BAAMD,MAAO,CAAC,MAAQ,SAAtB,MAI7DV,EAAMY,aAAe,uBAAGd,UAAU,gBAAb,cACnB,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMY,cAI5CZ,EAAMa,OAAS,uBAAGf,UAAU,kBAAmBE,EAAMa,SCrBvDC,EAAUC,mCAmEDC,E,2MAhEbC,MAAQ,CACNR,iBAAaS,EACbX,UAAMW,EACNV,aAASU,EACTP,cAAUO,EACVN,iBAAaM,EACbL,WAAOK,G,EAEThB,W,uCAAa,WAAMiB,GAAN,qBAAAC,EAAA,6DACXD,EAAME,iBACAd,EAAOY,EAAMG,OAAOC,SAAShB,KAAKiB,MAClChB,EAAUW,EAAMG,OAAOC,SAASf,QAAQgB,MAHnC,SAIYC,MAAM,qDAAD,OAAsDlB,EAAtD,YAA8DC,EAA9D,kBAA+EM,EAA/E,kBAJjB,cAILY,EAJK,gBAKQA,EAASC,OALjB,OAKLC,EALK,OAMRrB,GAAQC,EACT,EAAKqB,SAAS,CACZpB,YAAamB,EAAKE,KAAKC,KACvBxB,KAAMqB,EAAKxB,KACXI,QAASoB,EAAKI,IAAIxB,QAClBG,SAAUiB,EAAKE,KAAKnB,SACpBC,YAAagB,EAAKK,QAAQ,GAAGrB,YAC7BC,MAAO,KAGT,EAAKgB,SAAS,CACZpB,iBAAaS,EACbX,UAAMW,EACNV,aAASU,EACTP,cAAUO,EACVN,iBAAaM,EACbL,MAAO,2BAtBA,4C,8HA2BX,OACE,6BACE,yBAAKf,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAMI,WAAYgC,KAAKhC,aACvB,kBAAC,EAAD,CACEO,YAAayB,KAAKjB,MAAMR,YACxBE,SAAUuB,KAAKjB,MAAMN,SACrBJ,KAAM2B,KAAKjB,MAAMV,KACjBC,QAAS0B,KAAKjB,MAAMT,QACpBI,YAAasB,KAAKjB,MAAML,YACxBC,MAAOqB,KAAKjB,MAAMJ,kB,GArDpBsB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.00743011.chunk.js","sourcesContent":["import React from 'react';\n\nconst Titles = () => {\n  return(\n    <div>\n      <h1 className=\"title-container__title\">Weather Finder</h1>\n      <h3 className=\"container__subtitle\">Find out temperature, conditions and more...</h3>\n    </div>\n  );\n}\n\nexport default Titles;\n","import React from 'react';\n\nconst Form = props => {\n  return(\n    <form onSubmit={props.getWeather}>\n      <input type=\"text\" name=\"city\" placeholder=\"City...\"></input>\n      <input type=\"text\" name=\"country\" placeholder=\"Country...\"></input>\n      <button>Get Weather</button>\n    </form>\n  );\n}\n\nexport default Form;\n","import React from 'react';\n\nconst Weather = props => {\n  return(\n    <div className=\"weather__info\">\n      {\n        props.city && props.country && <p className=\"weather__key\">Location:\n          <span className=\"weather__value\"> { props.city }, { props.country }</span>\n        </p>\n      }\n      {\n        props.temperature && <p className=\"weather__key\">Temperature:\n          <span className=\"weather__value\"> { props.temperature }</span><span style={{\"color\":\"#fff\"}}>Â°C</span>\n        </p>\n      }\n      {\n        props.humidity && <p className=\"weather__key\">Humidity:\n          <span className=\"weather__value\"> { props.humidity }</span><span style={{\"color\":\"#fff\"}}>%</span>\n        </p>\n      }\n      {\n        props.description && <p className=\"weather__key\">Conditions:\n          <span className=\"weather__value\"> { props.description }</span>\n        </p>\n      }\n      {\n        props.error && <p className=\"weather__error\">{ props.error }</p>\n      }\n    </div>\n  );\n}\n\nexport default Weather;\n","import React from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n  }\n  getWeather = async(event) => {\n    event.preventDefault();\n    const city = event.target.elements.city.value;\n    const country = event.target.elements.country.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    if(city && country){\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\",\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the value\"\n      })\n    }\n  }\n  render() {\n    return(\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-lg-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-lg-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}